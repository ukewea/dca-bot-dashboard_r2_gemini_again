╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│  > alright now page loads and another error popped up:`Unexpected Application Error!                          │
│    Invalid currency code : USDC                                                                               │
│    RangeError: Invalid currency code : USDC                                                                   │
│        at new NumberFormat (<anonymous>)                                                                      │
│        at La (https://ukewea.github.io/dca-bot-dashboard_r2_gemini_again/assets/index-B2QH_qgK.js:69:592)     │
│        at lk (https://ukewea.github.io/dca-bot-dashboard_r2_gemini_again/assets/index-B2QH_qgK.js:69:1865)    │
│        at gy (https://ukewea.github.io/dca-bot-dashboard_r2_gemini_again/assets/index-B2QH_qgK.js:38:16998)   │
│        at Zp (https://ukewea.github.io/dca-bot-dashboard_r2_gemini_again/assets/index-B2QH_qgK.js:40:3139)    │
│        at IO (https://ukewea.github.io/dca-bot-dashboard_r2_gemini_again/assets/index-B2QH_qgK.js:40:44737)   │
│        at MO (https://ukewea.github.io/dca-bot-dashboard_r2_gemini_again/assets/index-B2QH_qgK.js:40:39727)   │
│        at J$ (https://ukewea.github.io/dca-bot-dashboard_r2_gemini_again/assets/index-B2QH_qgK.js:40:39655)   │
│        at Js (https://ukewea.github.io/dca-bot-dashboard_r2_gemini_again/assets/index-B2QH_qgK.js:40:39508)   │
│        at sh                                                                                                  │
│    (https://ukewea.github.io/dca-bot-dashboard_r2_gemini_again/assets/index-B2QH_qgK.js:40:35875)`            │
╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

✦ You've found another excellent bug. My apologies. The error Invalid currency code : USDC is happening because
  the standard Internationalization API (Intl.NumberFormat) used for currency formatting does not recognize
  cryptocurrency tickers like "USDC" as valid currency codes. It only works with official ISO 4217 codes like
  "USD".

  I will fix this by updating the formatCurrency function to handle non-standard currency codes gracefully. It
  will detect codes like "USDC" and format them as a number with the ticker appended (e.g., "500.00 USDC"),
  while still using the standard formatting for recognized codes like "USD".

  First, I will read the current formatters.ts file.
 ╭────────────────────────────────────╮
 │ ✔ ReadFile src/lib/formatters.ts  │
 ╰────────────────────────────────────╯
✦ Okay, I have the file content. I will now replace the faulty formatCurrency function with a more robust
  version that handles non-standard currency codes like "USDC" without crashing.
 ╭────────────────────────────────────────────────────────────────────────────────────────────────────────╮
 │ ✔ Edit src/lib/formatters.ts: export function formatCurrency... => export function formatCurrency...  │
 │                                                                                                        │
 │     1   export function formatCurrency(value: string | number, currency: string = 'USD') {             │
 │     2     const numericValue = typeof value === 'string' ? parseFloat(value) : value;                  │
 │     3 +                                                                                                │
 │     4 +   // Intl.NumberFormat's 'currency' style fails with non-ISO 4217 codes like 'USDC'.           │
 │     5 +   // We'll format these as a decimal and append the code as a string.                          │
 │     6 +   try {                                                                                        │
 │     7       return new Intl.NumberFormat('en-US', {                                                    │
 │     8         style: 'currency',                                                                       │
 │     9         currency: currency,                                                                      │
 │    10         minimumFractionDigits: 2,                                                                │
 │    11         maximumFractionDigits: 2,                                                                │
 │    12       }).format(numericValue);                                                                   │
 │    13 +   } catch (e) {                                                                                │
 │    14 +     if (e instanceof RangeError) {                                                             │
 │    15 +       // Fallback for non-standard currency codes.                                             │
 │    16 +       return `${numericValue.toLocaleString('en-US', {                                         │
 │    17 +         minimumFractionDigits: 2,                                                              │
 │    18 +         maximumFractionDigits: 2                                                               │
 │    19 +       })} ${currency}`;                                                                        │
 │    20       }                                                                                          │
 │    21 +     // Re-throw other unexpected errors.                                                       │
 │    22 +     throw e;                                                                                   │
 │    23 +   }                                                                                            │
 │    24 + }                                                                                              │
 │    25                                                                                                  │
 │    26   export function formatDateTime(dateString: string) {                                           │
 │    27     return new Intl.DateTimeFormat('en-US', {                                                    │
 ╰────────────────────────────────────────────────────────────────────────────────────────────────────────╯
✦ The currency formatting function has been fixed. I will now rebuild the application to include this
  correction.
 ╭──────────────────────────────────────────────────────────────────────────────────────────────────────╮
 │ ✔ Shell npm run build (Rebuild the application with the corrected currency formatting logic.)       │
 │                                                                                                      │
 │    > dca-bot-dashboard@0.0.0 build                                                                   │
 │    > vite build                                                                                      │
 │                                                                                                      │
 │    vite v5.4.19 building for production...                                                           │
 │    transforming...                                                                                   │
 │    ✓ 839 modules transformed.                                                                        │
 │    rendering chunks...                                                                               │
 │    computing gzip size...                                                                            │
 │    dist/index.html                   0.57 kB │ gzip:   0.33 kB                                       │
 │    dist/assets/index-B77jXnOg.css   10.14 kB │ gzip:   2.56 kB                                       │
 │    dist/assets/index-BJQ-HlPZ.js   600.04 kB │ gzip: 175.82 kB                                       │
 │    ✓ built in 5.21s                                                                                  │
 │                                                                                                      │
 │    (!) Some chunks are larger than 500 kB after minification. Consider:                              │
 │    - Using dynamic import() to code-split the application                                            │
 │    - Use build.rollupOptions.output.manualChunks to improve chunking:                                │
 │    https://rollupjs.org/configuration-options/#output-manualchunks                                   │
 │    - Adjust chunk size limit for this warning via build.chunkSizeWarningLimit.                       │
 ╰──────────────────────────────────────────────────────────────────────────────────────────────────────╯
✦ The build is complete. The currency formatting bug has been fixed.

  This should resolve the error you were seeing. Please push all the latest changes to your main branch. Once
  the deployment finishes, the site should load and display correctly.